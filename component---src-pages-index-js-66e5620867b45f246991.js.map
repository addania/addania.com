{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/header.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["style","color","headerText","to","src","width","crossorigin","props","m","module","exports","require","default","loader","enqueue","React","createContext","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json"],"mappings":"0FAAA,6CAIe,4BACb,yBAAKA,MAAQ,CAACC,MAAO,WACnB,6BACA,kBAAC,IAAD,CAAQC,WAAW,YACjB,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,QAAT,MACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,UAEF,6BACE,yBAAKC,IAAI,wBAAwBC,MAAO,UACxC,yDAEF,6BACE,ozRAyLN,4BAAQD,IAAI,sDAAsDE,aAAW,IAC7E,4BAAQF,IAAI,8DAA8DE,aAAW,IA1L/E,k5E,iCCjBN,oBACe,aAACC,GAAD,OACb,4BAAKA,EAAML,c,oBCFb,IAAsBM,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,G,iCCA/C,qFAcyBK,QAAOC,QAELC,IAAMC,cAAc,K,0ECMhCC,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGEJ,IAAMK,cAAcC,IAApB,eACLH,WACAC,iBACGA,EAAcG,OALV","file":"component---src-pages-index-js-66e5620867b45f246991.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"gatsby\";\nimport Header from \"../components/header.js\";\n// import \"../styles/global.css\"\nexport default () => (\n  <div style ={{color: \"purple\"}}>\n    <div>\n    <Header headerText=\"Addania\"/>\n      <Link to=\"/\">Blog</Link>\n      <Link to=\"/cv/\">CV</Link>\n      <Link to=\"/about/\">About</Link>\n    </div>\n    <div> \n      <img src=\"./pics/blogHeader.jpg\" width= \"300px\"/>\n      <p>Welcome to my Coding blog</p>\n    </div>\n    <div>\n      <div>\n      Ubuntu:\nIt is possible to have Ubuntu on Windows through feature called Windows Subsystem for Linux. Installation will result in having a completely new operational (sub)system (along side with Windows). When using this Windows Subsystem for Ubuntu, it only allows for command line, it doesnt have any user interface. Only interaction with the operational system is via command line (terminal). This system will be then used with Gatsby to create webpages and push my code to Github. Please note, upon first installation of Ubuntu subsystem, it is a completely blank software. It wont have access to my previously installed programms on Windows (like node.js, etc). Therefore we will need to install everything again.\n\nUbuntu directory on my PC:\n\\\\wsl$\\Ubuntu-18.04\\home\\addania\n\nUbuntu credentials:\naddania\nPBYStrica123***\n\nControls:\n\nCopy/Paste works differently in Ubuntu: ctrl+shift+c for copy, crtl+shift+v for paste\nSome commands will start with sudo which means to run as administrator\nj and k keys allows navigate up and down\nh and l allow to navigate left and right\n\nCommands:\n\n>>> to show which directory I am currently in we use command pwd (print working directory)\npwd\n\n>>> to display list of all files in a current directory\nls\n\n>>> to display list of all files in a current directory including hidden files (those with ., ex: .git)\nls -a\n\n>>> change directory cd + name of the directory (ex: cd src will go to folder called src in your currnet folder), this is to go one directory down the tree\ncd src\n\n>>> to go one directory up the tree\ncd ..\n\n>>> to create a folder\nmkdir\n\n>>> to create a new file called global.css\ntouch global.css\n\nHomebrew:\n>>> see current version of homebrew\nbrew -v\n\n>>> update brew\nbrew update\n\n>>> installing software hello\nbrew install hello\n\n>>> install node\nbrew install node\n\n>>> checking version of node\nnode --version\n\nGit:\nGit is a file versioning system\n\n>>> In order to install git we need to have apt-get updated. To update apt-get\nsudo apt-get update\n\n>>> to install Git\nsudo apt-get install git\n\n>>> to check version of Git\ngit --version\n\n>>> to set up username and email\ngit config --global user.name \"addania\"\ngit config --global user.email \"mirka.schw@gmail.com\"\n\n>>> to check status of my git in a project (if they are up-to-date with master branch or if I have any staging commits), first navigate to project folder by cd addania.com then executing:\ngit status\n\n>>> to see history of commits\ngit log\n\n>>> The git init command creates a new Git repository. Executing git init creates a .git subdirectory in the current working directory, which contains all of the necessary Git metadata for the new repository. To create git folder in your project folder:\ngit init\n\n>>> in order to commit anything, we first need to add files to staging area by using following command (dot means all files):\ngit add . \n\n>>> to commit files to LOCAL git repository use got commit comand. Please note that only previously staged files can be committed. git commit will open a dialog where we need to type descriptive message for the commit. add the message, press escape and type in Y:\ngit commit\n\n>>> to commit files to LOCAL git repository with a message already included in the command:\ngit commit -m \"message goes here\"\n\n>>> to see all REMOTE git repositories (if nothing happens means I dont have one and we need to create it):\ngit remote -v\n\n>>> to add a new REMOTE repository, where origin is just a random name of our new REMOTE repository and git@github.com:addania/addania.com.git is a URL from Github repository\ngit remote add origin git@github.com:addania/addania.com.git\ngit remote add origin git@github.com:addania/knowledgeBase.git  \n\n>>> to rename origin with new url if I need to change my repository name:\ngit remote set-url origin git@github.com:addania/addania.github.io.git\ngit remote set-url origin git@github.com:addania/addania.com.git\n\n>>> to check how many branches I have in my repository, if there is only one, the main one will be called usually master:\ngit branch\n\n>>> to push files from LOCAL git to REMOTE git on github, where origin is name of REMOTE repository and master is name of the banch in the project, main branch is called master:\ngit push origin master\n\n>>> If I dont want to write always git push origin master -force I can create upstream and link local to remote git by -u. After this command then I can use only git push to upload files\ngit push -u origin master -f\n\n>>> to overwrite anything on the REMOTE repository in master branch we can force push:\ngit push origin master --force \n\n>>> pulling down files from remote git to local git:\ngit pull origin master\n\n(origin name of my remote git and master is name of branch)\n\nSome Git definitions first:\n\nLOCAL\nWhen we talk about LOCAL we mean anything that is stored locally on your computer harddrive\n\nREMOTE\nWhen we talk about REMOTE we mean anything that is stored and backed-up centrally on some 3rd party service, such as GitHub. Your REMOTE service will be accessible online at any time from any location by anyone who has access to it, meaning you or your colleague who is working on your project together with you.\n\nGeneral Git workflow:\nFirst we need to link our LOCAL and REMOTE repositories using SSH Key.\nFirst we need to generate our LOCAL SSH key which we then paste to REMORE GitHub.\n\n\nImagine I work on my project addania.com which is my personal website. I created my project locally on my PC. In order to connect it to Git I first need to create a sub-folder called git with includes initial git setup.\nSome softwares like Gatsby create this folder automatically. I can add this folder manually using Ubuntu terminal and providing git init command which will create a subfolder git in my current project folder.\nThen I work on my project files and make changes to my website. Firstly I need to add those files manually to the git folder LOCALLY on my PC. Git is not tracking live all the changes done in project. I need to tell to\nGit that now is the time when I want to log the changes I made so far. Therefore all my LOCAL files need to be added to LOCAL git repository ( we are not talking about Github yet). In order to to this LOCAL workflow:\ngit add .\ngit commit -m \"message goes here\"\n\nWhen our LOCAL Git has logged our LOCAL changes we are ready to update our REMOTE repository, such as Github or Gitlab.\n\nThen we need to add our LOCAL git to REMOTE Github. Go to yout Github Repository and at the top of your GitHub repository's Quick Setup page, click  to copy the remote repository URL.\nAfterwards we go to Ubuntu command and use following command, where remote repository URL is the URL we copied from Github and origin is the name of our remote repository (origin is just a convention):\ngit remote add origin remote repository URL\nfor example:\ngit remote add origin git@github.com:addania/addania.com.git \n\nTo verify if our new remote was added we can check the git remote -v command. \nThen we are ready to puch our LOCAL git repository to the REMOTE Github repository:\ngit push origin master\n\nGatsby:\nSoftware to help create static website using react. They provide starter templates, ability to create multiple pages in their pages folder or generating ReactDOM automatically\n>>> to install Gatsby\n\n>>> to display basic commands in gatsby\ngatsby --help\n\n>>> to create a new Gatsby project, addania.com is a name of new project, gatsby-starter-hello-world is a starter template downloaded from Gatsby website which will setup all initial files to start web development with (similar to creating new react app)\ngatsby new addania.com https://github.com/gatsbyjs/gatsby-starter-hello-world\n\n>>> to start Gatsby react development environment for my new projct I need to navigate to the folder of my project with cd addania.com and then executing gatsby develop\ngatsby develop\n\nDeploying Website to Github Pages:\nhttps://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/\n\n>>> installing github pages to gatsby\nnpm install gh-pages --save-dev\n\n>>> builds website to github page, for example: https://addania.github.io/\nnpm run deploy\n\nReact:\n\nReact is a library/framework of Javascript developed by Facebook. Reach allows to build interactive websites using components and allowing having html css and Javascript in one file. \nReact is a closed environmnet and can be run in browser, on your local machine (my pc) or on phones (such as Android, etc).\n\nWhen I am developing a website in React I need to be able to see what I am building. I can do these:\n- A: doubleclick on my html file (index.html) and open it in browser. However, it wont really work. Other pages will not load, because I am only openineg filepath in browser.\n- B: run a web server locally on my machine (pc)\n\nIn order to run a web server on my machine, I need to install node.js\n\nIn order to be able to use React in a BROWSER I need package called reactDOM package if I want to display it in browser. If I dont want to install reactDOM package, I can still use script tags in my html file, like so:\n<script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin></script>\n<script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin></script>\nMore on this in official documentation here:https://reactjs.org/docs/add-react-to-a-website.html\n\nThese script tags in html are equivalent to a file in my project called package.json which is automatically provided by Gatsby:\n\"dependencies\":\n    \"gatsby\": \"^2.15.28\",\n    \"react\": \"^16.10.0\",\n    \"react-dom\": \"^16.10.0\"\n\n\nNode.js\nAdvantages of Node.js\n1) Creates Runtime Environments (local webserver)\nNode.js is a JavaScript runtime environment. It allows JavaScript to run outside of a BROWSER, for example I could run it on my local machine as a standalone application (localhost:8000) and play around with my page. Gatsby uses node.js to create the local host. Also create-react-app uses node.js to create the runtime environment.\n\n2) Enables to install cool packages(=libraries=modules)\nNode.js comes automatically with npm (node package manager), no need to install it extra! Package manager is included in every programming language. Package manager is a collection of software tools that automates the process of installing, upgrading, configuring, and removing computer programs. In NPM the package manager manages all the cool packages I might actually need. npm I can only install packages which run in browser. Example of packages: \nreact - allows access to all react modules/features like React.Component\nreactDOM - allows to generate react in the browser (unless I want to use script tags in html), for example: ReactDOM.render()\ncreate-react-app - enables to setup initial react files and create a runtime environment on local machine as localhost:8000. It ALSO automatically includes react and reactDOM packages\ngatsby - allows to build websites with multiple pages easier. It ALSO automatically includes react and reactDOM packages\n\nEach package needs to be installed by npm individually.\n\n2 ways how to download a package/any other software:\nA) go to webside -> click download -> run installer and install the software\nor\nB) use package managers - package manager MUST be run in command line\n\nCommands:\n>>> to install your favourite package\nnpm install react\nnpm install reactDOM\nnpm install create-react-app\nnpm install gatsby\n\nIn order to see which packages=libraries=modules my project is using I search for file called package.json. In the file there wil be an object called dependencies \n  \"dependencies\": \n    \"gatsby\": \"^2.15.28\",\n    \"react\": \"^16.10.0\",\n    \"react-dom\": \"^16.10.0\"\n\n>>> to read a manual npm\nman npm\n\n>>> to read the help of npm\nnpm help\n      </div>\n    </div>\n  </div>\n\n)\n","import React from \"react\"\nexport default (props) => (\n  <h1>{props.headerText}</h1>\n)","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}